local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Player = game:GetService("Players").LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Humanoid.RootPart or Character:FindFirstChild("HumanoidRootPart")

if game.GameId ~= 2820580801 then
    Fluent:Notify({
        Title = "Error",
        Content = "This script can only run in Ohio. Teleporting to Ohio...",
        Duration = 8
    })

    game:GetService("TeleportService"):Teleport(2820580801, Player)
    return
elseif not Humanoid or not RootPart then
    Fluent:Notify({
        Title = "Error",
        Content = "Your character is missing essential parts.",
        Duration = 8
    })
    return
end

local Window = Fluent:CreateWindow({
    Title = "Ohio Powers",
    SubTitle = "by veddetsiwt [v2.3.4]",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "box" }),
    Powers = Window:AddTab({ Title = "Powers", Icon = "flame" }),
    Buy = Window:AddTab({ Title = "Buy", Icon = "shopping-cart" }),
    Money = Window:AddTab({ Title = "Money", Icon = "wallet" }),
    Autofarm = Window:AddTab({ Title = "Autofarm", Icon = "rocket" }),
    Itemfarm = Window:AddTab({ Title = "Itemfarm", Icon = "gem" }),
    Other = Window:AddTab({ Title = "Other", Icon = "wrench" }),
}

local Options = Fluent.Options
local AutofarmActive = false

do
    -----[[ Main ]]-----

    Tabs.Main:AddParagraph({
        Title = "Work In Progress",
        Content = "This tab is a work in progress; more will be added soon."
    })

    local FullChatToggle = Tabs.Main:AddToggle("FullChatToggle", {Title = "Show Full Chat", Default = true })
    local TCService = game:GetService("TextChatService")

    FullChatToggle:OnChanged(function()
        TCService.ChatWindowConfiguration.Enabled = Options.FullChatToggle.Value
    end)

    -----[[ Powers ]]-----

    Tabs.Powers:AddParagraph({
        Title = "Work In Progress",
        Content = "This tab is a work in progress; more will be added soon."
    })

    Tabs.Powers:AddButton({
        Title = "LoopBring v2",
        Description = "Teleports you and everyone else under the map and places them in a circle pattern. [ohio-loopbring-v2]",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/veddetsiwt/ohio-loopbring-v2/refs/heads/main/source"))()
        end
    })

    local WalkSpeedSlider = Tabs.Powers:AddSlider("WalkSpeedSlider", {
        Title = "Speed",
        Description = "Change your character's walkspeed.",
        Default = 16,
        Min = 0,
        Max = 100,
        Rounding = 2,
        Callback = function(Value)
            Humanoid.WalkSpeed = Value
            task.spawn(function()
                while Value ~= 16 and task.wait() do
                    Humanoid.WalkSpeed = Value
                end
            end)
        end
    })

    local GravitySlider = Tabs.Powers:AddSlider("GravitySlider", {
        Title = "Gravity",
        Description = "Change the game's gravity.",
        Default = 196,
        Min = 0,
        Max = 196,
        Rounding = 2,
        Callback = function(Value)
            game.Workspace.Gravity = Value
        end
    })

    -----[[ Buy ]]-----

    local ItemsOnSale = game.Workspace:FindFirstChild("ItemsOnSale")
    local SelectedGun

    if ItemsOnSale then
        local QuickBuyGunsDropDown = Tabs.Buy:AddDropdown("QuickBuyGunsDropDown", {
            Title = "Select Gun",
            Values = {"AK-47", "AR-15", "AUG", "Acid Gun", "Barrett M107", "Deagle", "Double Barrel", "Dragunov", "Glock", "Glock 18", "M1911", "M1 Garand", "M249 SAW", "M4A1", "MP7", "Minigun", 
            "Mossberg", "P90", "Python", "RPG", "RPK", "Raygun", "Saiga 12", "Sawn Off", "Scar L", "Stagecoach", "Tommy Gun", "USP 45", "Uzi"},
            Multi = false,
            Default = 1,
        })

        QuickBuyGunsDropDown:OnChanged(function(Value)
            local Gun = ItemsOnSale:FindFirstChild(Value)
            if Gun and Gun:FindFirstChild("Button") and Gun.Button:FindFirstChild("ClickDetector") then
                SelectedGun = Gun
            else
                Fluent:Notify({
                    Title = "Error",
                    Content = "Gun not found or missing ClickDetector.",
                    Duration = 8
                })
            end
        end)

        PurchaseButton = Tabs.Buy:AddButton({
            Title = "Purchase",
            Description = "Purchase the item selected in the dropdown.",
            Callback = function()
                if SelectedGun and SelectedGun:FindFirstChild("Button") and SelectedGun.Button:FindFirstChild("ClickDetector") then
                    SelectedGun:PivotTo(RootPart.CFrame * CFrame.new(0, -2, 0))
                    fireclickdetector(SelectedGun.Button.ClickDetector)
                else
                    Fluent:Notify({
                        Title = "Error",
                        Content = "No valid gun selected for purchase.",
                        Duration = 8
                    })
                end
            end
        })              
    else
        Fluent:Notify({
            Title = "Error",
            Content = "'ItemsOnSale' folder not found in Workspace.",
            Duration = 8
        })
    end

    -----[[ Money ]]-----

    Tabs.Money:AddParagraph({
        Title = "Work In Progress",
        Content = "This tab is a work in progress; more will be added soon."
    })

    -----[[ Autofarm ]]-----

    Tabs.Autofarm:AddParagraph({
        Title = "Work In Progress",
        Content = "This tab is a work in progress; more will be added soon."
    })

    local AutofarmToggle = Tabs.Autofarm:AddToggle("AutofarmToggle", {Title = "Autofarm Active", Default = false })
    AutofarmToggle:OnChanged(function(Value)
        AutofarmActive = Value
        Fluent:Notify({
            Title = "Autofarm",
            Content = Value and "Enabled Autofarm" or "Disabled Autofarm",
            Duration = 5
        })
    end)

  -----[[ Itemfarm ]]-----

local ItemPickup = game.Workspace:FindFirstChild("Game") 
and game.Workspace.Game:FindFirstChild("Entities") 
and game.Workspace.Game.Entities:FindFirstChild("ItemPickup")

local ToggledItems = {}
local ItemfarmActive = false
local ItemfarmConnection

if ItemPickup then
    local function SearchForItems()
        if not ItemfarmActive or not next(ToggledItems) then return end
    
        for _, item in ipairs(ItemPickup:GetDescendants()) do
            if item:IsA("ProximityPrompt") then
                local model = item:FindFirstAncestorOfClass("Model")
                local itemType = model and model:GetAttribute("itemName")
    
                if itemType and ToggledItems[itemType] then
                    print("Farming item: " .. itemType)

                    model:PivotTo(RootPart.CFrame)
                    fireproximityprompt(item)
                end

                task.wait(0.25)
            end
        end
    end    
    
    local ItemfarmToggle = Tabs.Itemfarm:AddToggle("ItemfarmToggle", {Title = "Itemfarm Active", Default = false})
    
    local ItemfarmDropdown = Tabs.Itemfarm:AddDropdown("ItemfarmDropdown", {
        Title = "Select Items",
        Description = "Items to farm (you can select multiple).",
        Values = {"Money Printer", "Gold Bar", "Component Box"},
        Multi = true,
        Default = {"Money Printer"},
    })
    
    ItemfarmDropdown:OnChanged(function(SelectedItems)
        ToggledItems = {}
        for _, item in ipairs(SelectedItems) do
            print("Added: ".. item)
            ToggledItems[item] = true
        end
    end)
    
    ItemfarmToggle:OnChanged(function(Value)
        ItemfarmActive = Value
    
        if Value then
            print("Itemfarm enabled.")
            SearchForItems()
    
            if not ItemfarmConnection then
                ItemfarmConnection = ItemPickup.ChildAdded:Connect(SearchForItems)
            end
        else
            print("Itemfarm disabled.")
            
            if ItemfarmConnection then
                ItemfarmConnection:Disconnect()
                ItemfarmConnection = nil
            end
        end
    
        Fluent:Notify({
            Title = "Itemfarm",
            Content = Value and "Enabled Itemfarm" or "Disabled Itemfarm",
            Duration = 5
        })
    end)
end

-----[[ Other ]]-----

Tabs.Other:AddButton({
    Title = "Infinite Yield",
    Description = "Loads the Infinite Yield script.",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end
})

Tabs.Other:AddButton({
    Title = "Open Developer Console",
    Description = "If you encounter an error while using this script, check for errors in the dev console.",
    Callback = function()
        game:GetService("StarterGui"):SetCore("DevConsoleVisible", true)
    end
})

Tabs.Other:AddButton({
    Title = "Teleport to 'Ohio New'",
    Description = "Teleports you to an older Ohio subplace with faster regenerations.",
    Callback = function()
        Window:Dialog({
            Title = "Warning",
            Content = "This subplace is an older version of the game - If any items in your inventory did not exist back then, they can be overlapped and removed PERMANENTLY.",
            Buttons = {
                {
                    Title = "Confirm",
                    game:GetService("TeleportService"):Teleport(14767933027, Player)
                },
                {
                    Title = "Cancel",
                }
            }
        })
    end
})
end

Window:SelectTab(1)
Fluent:Notify({
    Title = "Finished Loading",
    Content = "The script has finished loading.",
    Duration = 5
})
